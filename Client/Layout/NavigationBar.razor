﻿@using Client.Authentication
﻿@using Client.Pages.Shared;

@inject NavigationManager NavManager;
@inject AuthenticationService AuthService;

@implements IDisposable;

		<div class="container">
			<div class="row justify-content-center">
				<div class="col-md-6 text-center mb-5">
					<h2 class="heading-section"></h2>
				</div>
			</div>
		</div>
		
		<div class="container-fluid px-md-5">
			<div class="row justify-content-between">
				<div class="col-md-8 order-md-last">
					<div class="row">
						<div class="col-md-6 text-center">
					<a class="navbar-brand" href="/"><img src="resursi/logo_welding.png" width="100" height="100"/><span></span></a>
						</div>
						<div class="col-md-6 d-md-flex justify-content-end mb-md-0 mb-3">
    						<PretragaComponent></PretragaComponent>
						</div>
					</div>
				</div>
				<div class="col-md-4 d-flex">
					<div class="social-media">
		    		<p class="mb-0 d-flex">
                        <a @onclick="IdiUKorpu" class="d-flex align-items-center justify-content-center">
							<i class="fa-solid fa-cart-shopping"></i>
							<sub class="small text-danger fw-bold">@korpaService.KorpaCount</sub>
						</a>

		    		</p>
	        </div>
				</div>
			</div>
		</div>
		<nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light" id="ftco-navbar">
	    <div class="container-fluid">
	    
	      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
	        <span class="fa fa-bars"></span> Meni
	      </button>
	      <div class="collapse navbar-collapse" id="ftco-nav">
	        <ul class="navbar-nav m-auto">
	        	<li class="nav-item active"><a href="/" class="nav-link">Početna</a></li>
	        	<li class="nav-item"><a href="/proizvodi" class="nav-link">Proizvodi</a></li>
				<li class="nav-item"><a href="#" class="nav-link">Kontakt</a></li>
				<li class="nav-item dropdown">
					<a class="nav-link" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="cursor:pointer;"><i class="fa-regular fa-user"></i></a>
					<div class="dropdown-menu" aria-labelledby="navbarDropdown">
						<AuthorizeView>
							<Authorized>
								@if (isAdmin)
								{
									string dodajProizvod = "/dodaj-proizvod";
									string dodajKategoriju = "/dodaj-kategoriju";

									<a class="dropdown-item" @onclick="() => NavManager.NavigateTo(dodajProizvod)" style="cursor:pointer;"><i class="fa-solid fa-plus"></i>&nbsp;Dodaj proizvod</a>

									<a class="dropdown-item" @onclick="() => NavManager.NavigateTo(dodajKategoriju)" style="cursor:pointer;"><i class="fa-solid fa-layer-group"></i>&nbsp;Dodaj kategoriju</a>

								}
								<a class="dropdown-item" style="cursor:pointer;"  @onclick="OdjavaKorisnika"><i class="fa fa-lock-open"></i> Odjava</a>
							</Authorized>

							<NotAuthorized>
								@{
									string registracija = "registracija-korisnika";
									string prijava = "prijava";
								}

								<a class="dropdown-item" @onclick="() => Preusmeri(prijava)" style="cursor:pointer;"><i class="fa fa-lock"></i>&nbsp;&nbsp;&nbsp;Prijava</a>

								<a class="dropdown-item" @onclick="() => Preusmeri(registracija)" style="cursor:pointer;"><i class="fa fa-sign-in"></i> &nbsp;&nbsp;&nbsp;Registracija</a>
							</NotAuthorized>
						</AuthorizeView>
					</div>
				</li>
	        </ul>
	      </div>
	    </div>
	  </nav>
    <!-- END nav -->



@code {

    private bool isAdmin = false;

    protected async override Task OnInitializedAsync()
    {
		var customAuthenticationService = (CustomAuthenticationStateProvider)AuthStateProvider;
		var authState = await customAuthenticationService.GetAuthenticationStateAsync();
		var korisnik = authState.User;
		isAdmin = korisnik.IsInRole("Admin");
       
		await korpaService.GetKorpaCount();
		korpaService.KorpaAction += StateHasChanged;
    }

    

    void Preusmeri(string url)
    {
        NavManager.NavigateTo($"nalog/{url}");
    }

    private async Task OdjavaKorisnika()
    {
        var lista = await korpaService.MojeNarudzbine();
        if (lista is not null && lista.Count > 0)
            foreach (var stavka in lista)
                await korpaService.ObrisiProizvodIzKorpe(stavka);

        var customAuthenticationService = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthenticationService.UpdateAuthenticationState(null);
        NavManager.NavigateTo("/", forceLoad: true);
    }

    void IdiUKorpu()
    {
        NavManager.NavigateTo("/korpa/moja-korpa");
    }

    public void Dispose()
    {
        korpaService.KorpaAction -= StateHasChanged;
    }
}