@page "/dodaj-kategoriju"
@using Client.Authentication

@implements IDisposable;

@if (proizvodService.IsVisible)
{
    <LoadingPage />
}
else
{
    <AuthorizeView>
        <Authorized>
            @if(isAdmin)
            {
                <EditForm Model="kategorija" OnValidSubmit="UpravljajKategorijom" Context="formContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <section class="ftco-section">
                        <div class="container">
                            <div class="row justify-content-center"></div>
                            <div class="row justify-content-center">
                                <div class="col-md-12 col-lg-10">
                                    <div class="wrap d-md-flex">
                                        <div class="login-wrap p-4 p-lg-5">
                                            <div class="d-flex">
                                                <div class="w-100">
                                                    <h3 class="mb-4">Dodaj novu kategoriju</h3>
                                                </div>
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="label" for="name">Naziv kategorije</label>
                                                <input type="text" @bind="@kategorija.Naziv" class="form-control" placeholder="Naziv kategorije" />
                                            </div>


                                            <div class="form-group">
                                                <button type="submit" class="form-control btn btn-primary submit px-3">Sačuvaj kategoriju  <i class="fa fa-plus"></i></button>
                                            </div>
                                        </div>
                                        <div class="text-wrap p-4 p-lg-5 text-center d-flex align-items-center order-md-last">
                                            <div class="text w-100">
                                                <h2>Želite da dodate proizvod?</h2>
                                                <a href="/dodaj-proizvod" class="btn btn-white btn-outline-white">Dodaj proizvod</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </EditForm>


                <MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>
            }

            else
            {
                <div id="notfound">
                    <div class="notfound">
                        <div class="notfound-404">
                            <h1>404</h1>
                        </div>
                        <h2>Zabranjen pristup resursu</h2>
                        <p>Nemate ovlašćenje za ovu operaciju</p>
                        <a href="/">Nazad na početnu</a>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div id="notfound">
                <div class="notfound">
                    <div class="notfound-404">
                        <h1>404</h1>
                    </div>
                    <h2>Niste prijavljeni</h2>
                    <p>Morate biti prijavljeni da bi mogli da pristupite ovoj stranici.</p>
                    <a href="/nalog/prijava">Prijava</a>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    Kategorija kategorija = new();

    bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var customAuthenticationService = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = await customAuthenticationService.GetAuthenticationStateAsync();
        var korisnik = authState.User;
        isAdmin = korisnik.IsInRole("Admin");

        messageDialogService.Action += StateHasChanged;
    }

    async Task UpravljajKategorijom()
    {
        messageDialogService.PrikaziDugmeSacuvaj = false;
        messageDialogService.PrikaziBusyDugme = !messageDialogService.PrikaziDugmeSacuvaj;

        

        if(isAdmin)
        {
            var (flag, poruka) = await kategorijaService.DodajKategoriju(kategorija);

            if (flag)
            {
                messageDialogService.messageDialog!.SetDialogValues("success", poruka);
                kategorija = new();
            }
            else
            {
                messageDialogService.messageDialog!.SetDialogValues("danger", poruka);
            }
        }
        else
            messageDialogService.messageDialog!.SetDialogValues("danger", "Nemate ovlašćenje za ovu operaciju!");
        
        messageDialogService.SetMessageDialog();
        return;
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
