@page "/dodaj-kategoriju"
@using Client.Authentication

@implements IDisposable;

@if (proizvodService.IsVisible)
{
    <LoadingPage />
}
else
{
    <AuthorizeView>
        <Authorized>
            @if(isAdmin)
            {
                <div class="container">
                    <div class="row">
                        <div class="col-md-6">
                            <EditForm Model="kategorija" OnValidSubmit="UpravljajKategorijom" Context="formContext">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="card">
                                    <div class="card-header">Dodaj kategoriju</div>
                                    <div class="card-body">
                                        <div class="form-group">
                                            <label class="form-label">Naziv</label>
                                            <InputText @bind-Value="kategorija.Naziv" class="form-control"></InputText>
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <div class="form-group mt-3">
                                            @if (messageDialogService.PrikaziDugmeSacuvaj)
                                            {
                                                <button type="submit" class="btn btn-outline-primary">Sačuvaj kategoriju <i class="fa fa-plus"></i></button>
                                            }
                                            <BusyDugmeComponent PrikaziBusyDugme="messageDialogService.PrikaziBusyDugme"></BusyDugmeComponent>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>
            }

            else
            {
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <p role="alert" class="alert alert-warning">Nemate ovlašćenje za ovu operaciju! </p>
                        </div>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <p role="alert" class="alert alert-warning">Morate biti prijavljeni da biste pristupili ovoj stranici..</p>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    Kategorija kategorija = new();

    bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var customAuthenticationService = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = await customAuthenticationService.GetAuthenticationStateAsync();
        var korisnik = authState.User;
        isAdmin = korisnik.IsInRole("Admin");

        messageDialogService.Action += StateHasChanged;
    }

    async Task UpravljajKategorijom()
    {
        messageDialogService.PrikaziDugmeSacuvaj = false;
        messageDialogService.PrikaziBusyDugme = !messageDialogService.PrikaziDugmeSacuvaj;

        

        if(isAdmin)
        {
            var (flag, poruka) = await kategorijaService.DodajKategoriju(kategorija);

            if (flag)
            {
                messageDialogService.messageDialog!.SetDialogValues("success", poruka);
                kategorija = new();
            }
            else
            {
                messageDialogService.messageDialog!.SetDialogValues("danger", poruka);
            }
        }
        else
            messageDialogService.messageDialog!.SetDialogValues("danger", "Nemate ovlašćenje za ovu operaciju!");
        
        messageDialogService.SetMessageDialog();
        return;
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
