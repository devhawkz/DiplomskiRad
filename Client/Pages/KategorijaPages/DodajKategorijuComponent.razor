@page "/dodaj-kategoriju"
@implements IDisposable;

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="kategorija" Enhance OnValidSubmit="UpravljajKategorijom">
                <DataAnnotationsValidator />
                <ValidationSummary/>

                <div class="card">
                    <div class="card-header">Dodaj kategoriju</div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Naziv</label>
                            <InputText @bind-Value="kategorija.Naziv" class="form-control"></InputText>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="form-group mt-3">
                            @if (messageDialogService.PrikaziDugmeSacuvaj)
                            {
                                <button type="submit" class="btn btn-outline-primary">Sačuvaj kategoriju  <i class="fa fa-plus"></i></button>
                            }
                            <BusyDugmeComponent PrikaziBusyDugme="messageDialogService.PrikaziBusyDugme"></BusyDugmeComponent>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!--Ukljucuje MessageDialog komponentu u render ove komponente i dodeljuje promenljivoj messageDialog referencu ka komponenti MessageDialog-->
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

@code {
    Kategorija kategorija = new();

    protected override void OnInitialized()
    {
        // StateHasChanged je metoda koja se koristi u Blazoru da bi se reklo frameworku da je došlo do promjene u stanju komponente i da treba ponovno renderirati komponentu. Dakle, dodavanjem StateHasChanged na Action u messageDialogService, komponenta će biti osvježena kada se dogodi određeni događaj u messageDialogService, omogućavajući ažuriranje prikaza komponente kada se stanje promijeni.
        messageDialogService.Action += StateHasChanged;
    }

    async Task UpravljajKategorijom()
    {
        // kada se klikne na dugme sacuvaj onemogucava se ponovni klik na to
        messageDialogService.PrikaziDugmeSacuvaj = false;
        messageDialogService.PrikaziBusyDugme = !messageDialogService.PrikaziDugmeSacuvaj;


        var (flag, poruka) = await kategorijaService.DodajKategoriju(kategorija);

        // ako je kategorija uspesno dodata ispisi ovo
        if (flag)
        {
            messageDialogService.messageDialog!.SetDialogValues("success", poruka);

            // resetujemo polja forme
            kategorija = new();
        }

        else
            messageDialogService.messageDialog!.SetDialogValues("danger", poruka);


        messageDialogService.SetMessageDialog();

        // signalizacija da je metoda zavrsena
        return;
    }

    public void Dispose()
    {
        // To je važno jer kada se komponenta više ne koristi, ne želimo da se događaji povezani sa stanjem komponente i renderiranjem ažuriraju, jer to može dovesti do neočekivanih ponašanja ili propusta. Dakle, uklanjanjem StateHasChanged iz Action u messageDialogService, osiguravamo da se komponenta više ne ažurira kada se dogodi promjena u messageDialogService.
        messageDialogService.Action -= StateHasChanged;
    }
}
