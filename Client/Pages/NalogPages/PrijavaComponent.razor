@page "/nalog/prijava"

@using Client.Authentication
@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable;
@inject NavigationManager NavManager;

    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <EditForm Enhance Model="korisnik" OnValidSubmit="UpravljajPrijavom">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="card">
                        <div class="card-header">Prijava</div>
                        <div class="card-body">
                            <div class="form-group mt-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="korisnik.Email" class="form-control" />
                            </div>

                            <div class="form-group mt-3">
                                <label class="form-label">Lozinka</label>
                                <input type="password" @bind="korisnik.Lozinka" class="form-control" />
                            </div>

                            <div class="form-group mt-3">
                                @if (messageDialogService.PrikaziDugmeSacuvaj)
                                {
                                    <button class="btn btn-outline-primary float-end" type="submit">Prijava</button>
                                }
                                <BusyDugmeComponent PrikaziBusyDugme=messageDialogService.PrikaziBusyDugme />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <!--prikazivanje poruke-->
    <MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

@code {
    PrijavaDTO korisnik = new();

    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    async Task UpravljajPrijavom()
    {
        messageDialogService.PrikaziDugmeSacuvaj = false;
        messageDialogService.PrikaziBusyDugme = !messageDialogService.PrikaziDugmeSacuvaj;

        var rezultat = await nalogService.Prijava(korisnik);

        if(rezultat.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new TokenProp() { Token = rezultat.Token, RefreshToken = rezultat.RefreshToken });
            messageDialogService.messageDialog!.SetDialogValues("success", rezultat.Poruka);
            NavManager.NavigateTo("/", forceLoad: true);
        }

        else
        {
            messageDialogService.messageDialog!.SetDialogValues("danger", rezultat.Poruka);
            korisnik = new();
        }

        messageDialogService.SetMessageDialog();

        // signalizacija da je metoda zavrsena
        return;
        
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
