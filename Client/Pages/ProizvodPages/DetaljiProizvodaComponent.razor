@using Client.Authentication
@implements IDisposable;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12" id="kontejner">
            <div class="card" id="telo">
                    <div class="d-flex justify-content-between">
                    <img src="@Proizvod!.Base64Img"  />
                        <div class="card-body">
                            <p>
                                <div class="vstack gap-2">
                                    <h3>@Proizvod.Naziv</h3>
                                    <div class="hstack gap-2">
                                    <span>Kategorija: </span>
                                        <span>
                                            @if(Proizvod is not null)
                                            {
                                            <span >@Proizvod.Kategorija!.Naziv</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="hstack gap-2">
                                        <h5 style="text-align:center">Tehničke specifikacije</h5> 
                                    </div>
                                    <div class="hstack gap-2">
                                        <p>@Proizvod!.Opis</p>
                                    </div>
                                    <div class="hstack gap-2">
                                        <span>Cena:</span>
                                        <span class="text-danger">@Proizvod.Cena.ToString("#.## RSD")</span>
                                    </div>
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="footer">
                    <button class="btn btn-info" id="dugme-crno" @onclick="KlikUnazad">Nazad</button>
                    <button class="btn btn-danger" id="dugme-crveno" style="margin-left:20px;" @onclick="DodajUKorpu"><i class="fa fa-cart-shopping"></i></button>
                    <AuthorizeView>
                        <Authorized>
                            @if(isAdmin)
                            {
                            <button class="btn btn-danger" id="dugme-crveno" style="margin-left:20px; float:right;" @onclick="ObrisiProizvod">Obriši proizvod <i class="fa fa-solid fa-trash"></i></button>
                            }
                    </Authorized>
                    </AuthorizeView>
                
                </div>
            </div>
        </div>
    </div>

<MessageDialog @ref="messageDialogService.messageDialog" />
@code {
    private bool isAdmin = false;

    [Parameter] public Proizvod Proizvod { get; set; }

    // obavestava parent komponentu cim se nesto desi u child komponenti
    [Parameter] public EventCallback HandleBackClickedEvent { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var customAuthenticationService = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = await customAuthenticationService.GetAuthenticationStateAsync();
        var korisnik = authState.User;
        isAdmin = korisnik.IsInRole("Admin");

        messageDialogService.Action += StateHasChanged;
    }

    async Task KlikUnazad()
    {
        await HandleBackClickedEvent.InvokeAsync();
    }


    async Task DodajUKorpu()
    {
        if (Proizvod is null) return;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            PrikaziOdgovor(await korpaService.DodajUKorpu(Proizvod));
        }
        else
        {
            NavManager.NavigateTo("/nalog/prijava"); // Preusmeravanje na stranicu za prijavu
        }


    }

    async Task ObrisiProizvod()
    {
        if(isAdmin)
        {
            if (Proizvod is null) return;
            var (flag, poruka) = await proizvodService.ObrisiProizvod(Proizvod.Id);

            if(flag)
            {
                messageDialogService.messageDialog!.SetDialogValues("success", poruka);
                NavManager.NavigateTo("/", forceLoad:true);
            }

            else
                messageDialogService.messageDialog!.SetDialogValues("danger", poruka);
        }
        else
            messageDialogService.messageDialog!.SetDialogValues("danger", "Nemate ovlašćenje za ovu operaciju!");


    }

    private void PrikaziOdgovor(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("success", serviceResponse.Poruka);
        else
            messageDialogService.messageDialog!.SetDialogValues("warning", serviceResponse.Poruka);

        messageDialogService.SetMessageDialog();
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
