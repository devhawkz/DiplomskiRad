@using Client.Pages.ProizvodPages
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

@if (proizvodService.PreporuceniProizvodi is not null)
{
    <div class="container-fluid">
        @{
            Proizvod banner1 = proizvodService.GetNasumicniProizvod();
            Proizvod banner2 = proizvodService.GetNasumicniProizvod();
        }
        <div class="row">
            @if (banner1 is not null && banner2 is not null)
            {
                <div class="col-lg-6">
                    <div class="card border-info">
                        <div class="card-header p-3" style="min-height:280px;">
                            <div class="d-flex justify-content-between">
                                <div class="text-start">
                                    <h2 style="font-family:Impact;">Trenutno na sniženju</h2>
                                    <h5 class="text-info">@banner1.Naziv</h5>
                                    <p class="text-muted fs-6" style="font-family:Tahoma">@(toolsService.GetOpis(banner1.Opis!))</p>
                                    <h6 class="text-muted">Moguća dostava na kućnu adresu</h6>
                                    <h5 class="text-danger">@banner1.Cena.ToString("$#.##")</h5>
                                    <button class="btn btn-danger" @onclick="() => DodajUKorpu(banner1)">
                                        KUPI ODMAH <i class="fa fa-cart-shopping"></i>
                                    </button>
                                </div>
                                <img src="@banner1.Base64Img" width="150" height="200" class="float-end" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="card border-primary">
                        <div class="card-header p-3" style="min-height:280px;">
                            <div class="d-flex justify-content-between">
                                <div class="text-start">
                                    <h2 style="font-family:Impact;">Trenutno na sniženju</h2>
                                    <h5 class="text-info">@banner2.Naziv</h5>
                                    <p class="text-muted fs-6" style="font-family:Tahoma">@(toolsService.GetOpis(banner2.Opis!))</p>
                                    <h6 class="text-muted">Moguća dostava na kućnu adresu</h6>
                                    <h5 class="text-danger">@banner2.Cena.ToString("$#.##")</h5>
                                    <button class="btn btn-danger" @onclick="() => DodajUKorpu(banner2)">
                                        KUPI ODMAH <i class="fa fa-cart-shopping"></i>
                                    </button>
                                </div>
                                <img src="@banner2.Base64Img" width="150" height="200" class="float-end" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    protected async override Task OnInitializedAsync()
    {
        bool preporucen = true;
        await proizvodService.GetProizvode(preporucen);
        proizvodService.ProizvodAction += StateHasChanged;
        messageDialogService.Action += StateHasChanged;
    }

    async Task DodajUKorpu(Proizvod proizvod)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            PrikaziOdgovor(await korpaService.DodajUKorpu(proizvod));
        }
        else
        {
            NavManager.NavigateTo("/nalog/prijava"); // Preusmeravanje na stranicu za prijavu
        }
    }

    private void PrikaziOdgovor(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("success", serviceResponse.Poruka);
        else
            messageDialogService.messageDialog!.SetDialogValues("warning", serviceResponse.Poruka);

        messageDialogService.SetMessageDialog();
    }

    public void Dispose()
    {
        proizvodService.ProizvodAction -= StateHasChanged;
        messageDialogService.Action -= StateHasChanged;
    }
}
