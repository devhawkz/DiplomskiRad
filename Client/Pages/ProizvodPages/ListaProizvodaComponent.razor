@implements IDisposable;

@if(SviProizvodi is not null)
{
    var listaPodataka = SviProizvodi.Skip(SkipVrednost).Take(TakeVrednost).ToList(); 
    
    <div class="container-fluid">
        <div class="row">
            @foreach(var proizvod in listaPodataka!.OrderBy(_=> _.PreporucenProizvod))
            {
                <div class="col-md-3 col-sm-6">
                    <div class="product-grid">
                        <div class="product-image">
                            <a @onclick="() => PrikaziDetaljeProizvoda(proizvod)" class="image">
                                <img src="@proizvod.Base64Img" style="cursor:pointer;" />
                            </a>
                        </div>
                        <div class="product-content">
                            <span class="product-category"><a href="">@proizvod.Kategorija!.Naziv</a></span>
                            <h3 class="title" @onclick="() => PrikaziDetaljeProizvoda(proizvod)">@proizvod.Naziv</h3>
                            <div class="price">@proizvod.Cena.ToString("#.## RSD")</div>
                            <a @onclick="() => DodajUKorpu(proizvod)" class="add-to-cart"><i class="fa fa-shopping-cart"></i> Dodaj u korpu</a>
                        </div>
                    </div>
                </div>
            }
            <div class="d-flex justify-content-center">
                <SfPager @ref="@stranica" PageSize="6" NumericItemsCount="4" TotalItemsCount="SviProizvodi.Count" ItemClick="Klik" />
            </div>

        </div>
    </div>
}
else
{
    <div class="alert alert-info">Nijedan proizvod nije dostupan. </div>
}

<MessageDialog @ref="messageDialogService.messageDialog" />

@code {
    SfPager? stranica;
    public int SkipVrednost;
    public int TakeVrednost = 6;

    // ako se ne dobije nista kao parametar rute ili query string, kreira se nova lista proizvoda
    [Parameter]
    public List<Proizvod> SviProizvodi { get; set; } = new();
    
    [Parameter] public EventCallback<Proizvod> HandleProductDetailsEvent { get; set; }
    
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    public void Klik(PagerItemClickEventArgs args)
    {
        SkipVrednost = (args.CurrentPage * stranica!.PageSize) - stranica.PageSize;
        TakeVrednost = stranica.PageSize;
    }

    private async Task DodajUKorpu(Proizvod model)
    {
        var (flag, poruka) = await korpaService.DodajUKorpu(model);

        if (flag)
            messageDialogService.messageDialog!.SetDialogValues("success", poruka);

        else
            messageDialogService.messageDialog!.SetDialogValues("info", poruka);

        messageDialogService.SetMessageDialog();


    }

    async Task PrikaziDetaljeProizvoda(Proizvod proizvod) => await HandleProductDetailsEvent.InvokeAsync(proizvod);


    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
