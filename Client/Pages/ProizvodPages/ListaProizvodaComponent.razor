@using System.Globalization
@implements IDisposable;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

@if(SviProizvodi is not null)
{
    var listaPodataka = SviProizvodi.Skip(SkipVrednost).Take(TakeVrednost).ToList(); 
    
    <div class="section-products">
        <div class="container">
            <div class="row">
                @foreach (var proizvod in listaPodataka!.OrderBy(_ => _.PreporucenProizvod))
                {
                    <div class="col-md-3 col-sm-6">
                        <div id="product-1" class="single-product">
                            <div class="part-1">
                                <a @onclick="() => PrikaziDetaljeProizvoda(proizvod)" class="image">
                                    <img src="@proizvod.Base64Img" style="cursor:pointer;" width="270" height="270"/>
                                </a>
                                <ul>
                                    <li><a @onclick="() => PrikaziDetaljeProizvoda(proizvod)"><i class="fa-solid fa-info"></i></a></li>
                                    <li><a @onclick="() => DodajUKorpu(proizvod)"><i class="fas fa-shopping-cart"></i></a></li>

                                </ul>
                            </div>
                            <div class="part-2">
                                <h5>@proizvod.Kategorija.Naziv</h5>
                                <h3 class="product-title" @onclick="() => PrikaziDetaljeProizvoda(proizvod)">@proizvod.Naziv</h3>
                                <h4 class="product-price">@proizvod.Cena.ToString("#,##0.00 RSD")</h4>
                            </div>
                        </div>
                    </div>
                }
                <div class="d-flex justify-content-center">
                    <SfPager @ref="@stranica" PageSize="8" NumericItemsCount="4" TotalItemsCount="SviProizvodi.Count" ItemClick="Klik" />
                </div>

            </div>
        </div>
    </div>
    
}
else
{
    <div class="alert alert-info">Nijedan proizvod nije dostupan. </div>
}

<MessageDialog @ref="messageDialogService.messageDialog" />

@code {
    SfPager? stranica;
    public int SkipVrednost;
    public int TakeVrednost = 8;

    // ako se ne dobije nista kao parametar rute ili query string, kreira se nova lista proizvoda
    [Parameter]
    public List<Proizvod> SviProizvodi { get; set; } = new();
    
    [Parameter] public EventCallback<Proizvod> HandleProductDetailsEvent { get; set; }
    
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    public void Klik(PagerItemClickEventArgs args)
    {
        SkipVrednost = (args.CurrentPage * stranica!.PageSize) - stranica.PageSize;
        TakeVrednost = stranica.PageSize;
    }

    private async Task DodajUKorpu(Proizvod model)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            PrikaziOdgovor(await korpaService.DodajUKorpu(model));
        }
        else
        {
            NavManager.NavigateTo("/nalog/prijava"); // Preusmeravanje na stranicu za prijavu
        }

    }

    private void PrikaziOdgovor(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("success", serviceResponse.Poruka);
        else
            messageDialogService.messageDialog!.SetDialogValues("warning", serviceResponse.Poruka);

        messageDialogService.SetMessageDialog();
    }


    async Task PrikaziDetaljeProizvoda(Proizvod proizvod) => await HandleProductDetailsEvent.InvokeAsync(proizvod);


    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}