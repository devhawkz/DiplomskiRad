@implements IDisposable;

@if(SviProizvodi is not null)
{
    var listaPodataka = SviProizvodi.Skip(SkipVrednost).Take(TakeVrednost).ToList(); 
    
    <div class="container-fluid">
        <div class="row featured__filter">
            @foreach(var proizvod in listaPodataka!.OrderBy(_=> _.PreporucenProizvod))
            {
                <div class="col-lg-2 col-md-3 col-sm-6 border-success">
                    <div class="featured__item" style="width: 200px;">
                        <div class="featured__item__pic set-bg">
                            <img src="@proizvod.Base64Img" width="150" height="200"  @onclick="() => PrikaziDetaljeProizvoda(proizvod)" style="cursor:pointer;"/>
                            <ul class="featured__item__pic__hover">
                                <li><a href="#"><i class="fa fa-heart"></i></a></li>
                                <li><a href="#"><i class="fa fa-retweet"></i></a></li>
                                <li><a @onclick="() => DodajUKorpu(proizvod)" style="cursor:pointer;"><i class="fa fa-shopping-cart text-danger"></i></a></li>
                            </ul>
                        </div>
                        <div class="featured__item__text">
                            <h6 class="text-primary" @onclick="() => PrikaziDetaljeProizvoda(proizvod)" style="cursor:pointer;">@proizvod.Naziv</h6>
                            <!--Konvertuje cenu u string (pr. $123.45)-->
                            <h5 class="text-danger">@proizvod.Cena.ToString("$#.##")</h5>
                        </div>
                    </div>
                </div>
            }
            <div class="d-flex justify-content-center">
                <SfPager @ref="@stranica" PageSize="6" NumericItemsCount="4" TotalItemsCount="SviProizvodi.Count" ItemClick="Klik" />
            </div>

        </div>
    </div>
}
else
{
    <div class="alert alert-info">Nijedan proizvod nije dostupan. </div>
}

<MessageDialog @ref="messageDialogService.messageDialog" />

@code {
    SfPager? stranica;
    public int SkipVrednost;
    public int TakeVrednost = 6;

    // ako se ne dobije nista kao parametar rute ili query string, kreira se nova lista proizvoda
    [Parameter]
    public List<Proizvod> SviProizvodi { get; set; } = new();
    
    [Parameter] public EventCallback<Proizvod> HandleProductDetailsEvent { get; set; }
    
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    public void Klik(PagerItemClickEventArgs args)
    {
        SkipVrednost = (args.CurrentPage * stranica!.PageSize) - stranica.PageSize;
        TakeVrednost = stranica.PageSize;
    }

    private async Task DodajUKorpu(Proizvod model)
    {
        var (flag, poruka) = await korpaService.DodajUKorpu(model);

        if (flag)
            messageDialogService.messageDialog!.SetDialogValues("success", poruka);

        else
            messageDialogService.messageDialog!.SetDialogValues("info", poruka);

        messageDialogService.SetMessageDialog();


    }

    async Task PrikaziDetaljeProizvoda(Proizvod proizvod) => await HandleProductDetailsEvent.InvokeAsync(proizvod);


    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
