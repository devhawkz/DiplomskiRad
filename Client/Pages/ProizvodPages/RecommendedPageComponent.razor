@implements IDisposable;

@if(proizvodService.PreporuceniProizvodi is not null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="card border-success shadow card-container mb-2 mt-2">
                <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover" AnimationEffect="CarouselAnimationEffect.Slide" AutoPlay="true" ShowIndicators="true">
                    <ChildContent>
                        @foreach(var itemDictionary in RecommendCarouselGroupProducts)
                        {
                            <CarouselItem>
                                <figure>
                                    <div class="row">
                                        @foreach(var product in itemDictionary.Value)
                                        {
                                            <div class="col-lg-2 card-container-display">
                                                <div class="card border-success shadow">
                                                    <div class="card-body d-flex justify-content-between">
                                                        <img src="@product.Base64Img" width="100" height="150" class="d-flex justify-content-center" style="margin-right: 5px;"/>
                                                        <div class="vstack gap-1">
                                                            <h5>@product.Naziv</h5>
                                                            <h6>@(toolsService.GetOpis(product.Opis!))</h6>
                                                            <h6 class="text-danger">@product.Cena</h6>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </figure>
                            </CarouselItem>
                        }
                    </ChildContent>

                    <!--Strelica unazad -->
                    <PreviousButtonTemplate>
                        <img src="../resursi/unazad.png" width="40" height="40" id="styleCursor" />
                    </PreviousButtonTemplate>

                    <!--Strelica unapred -->
                    <NextButtonTemplate>
                        <img src="../resursi/unapred.png" width="40" height="40" id="styleCursor" />
                    </NextButtonTemplate>

                    <!--3 tacke -->
                    <IndicatorsTemplate>
                        <div class="indicator"> </div>
                    </IndicatorsTemplate>

                </SfCarousel>
            </div>
        </div>
    </div>
}

@code {

    // ovo je zapravo kes memorija
    List<Proizvod>? PreporuceniProizvodi { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        bool preporuceno = true;
        await proizvodService.GetProizvode(preporuceno);
        PreporuceniProizvodi = proizvodService.PreporuceniProizvodi;
        proizvodService.ProizvodAction += StateHasChanged;
        Popuni();
    }

    public void Dispose()
    {
        proizvodService.ProizvodAction -= StateHasChanged;
    }

    Dictionary<int, List<Proizvod>> RecommendCarouselGroupProducts = new();
    void Popuni()
    {
        int itemPerView = 6;
        int totalProducts = proizvodService.PreporuceniProizvodi.Count;
        int numberOfGroups = (int)Math.Ceiling((double)totalProducts / itemPerView);
        int startNumber = 1;
        int skip = 0;

        if (numberOfGroups <= 0) return;

        while(startNumber <= numberOfGroups)
        {
            var products = proizvodService.PreporuceniProizvodi.Skip(skip).Take(itemPerView).ToList();
            RecommendCarouselGroupProducts.Add(startNumber, products);
            skip += itemPerView;
            startNumber++;
        }
    }

    
}
