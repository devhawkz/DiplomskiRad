@implements IDisposable;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-md-12 col-sm-12">
                <hr />
                <span style="font-family:MojFont">Najprodavanije</span>
                <div class="card border-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-evenly align-items-center">

                            <img src="../resursi/unazad.png" width="30" height="30" id="styleCursor" @onclick="PrethodnoDugme" />
                            @if (preporucenaListaProizvoda is null) return;
                            @foreach (var proizvod in preporucenaListaProizvoda)
                            {
                            <div class="container page-wrapper">
                                <div class="page-inner">
                                    <div class="row">
                                        <div class="el-wrapper">
                                            <div class="box-up">
                                                <img class="img" src="@proizvod.Base64Img" width="150" height="200" style="max-width:150px;min-width:150px;">
                                                <div class="img-info">
                                                    <div class="info-inner">
                                                        <span class="p-name">@proizvod.Naziv</span>
                                                        <span class="p-company">@proizvod.Kategorija!.Naziv</span>
                                                    </div>
                                                </div>
                                                <div class="box-down">
                                                    <div class="h-bg">
                                                        <div class="h-bg-inner"></div>
                                                    </div>
                                                    <a class="cart" @onclick="() => PrikaziProizvod(proizvod)" style="cursor:pointer;">
                                                        <span class="add-to-cart" >
                                                            <span class="txt" >Prikaži detalje</span>
                                                        </span>
                                                      
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            }
                            <img src="../resursi/unapred.png" width="30" height="30" id="styleCursor" @onclick="NarednoDugme" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>




@code{
    List<Proizvod>preporucenaListaProizvoda = new();

    // predstavlja maks br. elemenata na jednoj strani -- po default-u je 5 
    public int VelicinaStrane { get; set; } = 4;

    //predstavlja br. elemeanta koji treba da se preskoce prilikom prikazivanja -- po default-u 0 za prvu stranu
    public int Skip { get; set; } = 0;

    //predstavlja br. elemenata koji se uzimaju za prikazivanje -- po default-u 5, ako ima dovoljno proizvoda, ako nema onda ce se prikazati preostali proizvodi 
    public int Take { get; set; } = 4;


    protected async override Task OnInitializedAsync()
    {
        // nije preporucljivo direktno slanje vrednosti vec se salju promenljive
        bool preporuceno = true;
        await proizvodService.GetProizvode(preporuceno);
        proizvodService.ProizvodAction += StateHasChanged;
        UcitajPodatke();
    }

    private async void UcitajPodatke()
    {
        // lista proizvoda za jednu stranu
        var listaProizvoda = await SkipAndTake(Skip, Take);
        Skip += VelicinaStrane;
        DodajUPreporuceneProizvode(listaProizvoda);
    }

    private async Task<List<Proizvod>> SkipAndTake(int skip, int take) => proizvodService.PreporuceniProizvodi.Skip(skip).Take(take).ToList();

    private void DodajUPreporuceneProizvode(List<Proizvod> listaProizvoda)
    {
        // ako ova promenljiva ima null vrednost onda se metoda clear nece izvrsiti
        preporucenaListaProizvoda?.Clear();
        preporucenaListaProizvoda = listaProizvoda;
    }

    async void PrethodnoDugme()
    {
        // ako je  skip == 5 to znaci da se nalazimo na prvoj strani i ne mozemo da idemo unazad
        if (Skip == 5) return;
        // proizvodi koji treba da se prikazu na prethodnoj stranici -- f-la za izracunavanje koliko proizvoda treba preskociti
        var getPrethodneProizvode = await SkipAndTake(Skip - (VelicinaStrane * 2), Take);
        // smanjuje se skip za jednu stranu
        Skip -= VelicinaStrane;
        DodajUPreporuceneProizvode(getPrethodneProizvode);
    }

    async void NarednoDugme()
    {
        // ako je relacija tacna znaci da se nalazimo na poslednjoj strani
        if (Skip > proizvodService.PreporuceniProizvodi!.Count()) return;
        var getSledeceProizvode = await SkipAndTake(Skip, Take);
        // povecava se skip za jednu stranu
        Skip += VelicinaStrane;
        DodajUPreporuceneProizvode(getSledeceProizvode);
    }

    void PrikaziProizvod(Proizvod proizvod) => NavManager.NavigateTo($"/proizvodi/{proizvod.Id}");

    public void Dispose()
    {
        proizvodService.ProizvodAction -= StateHasChanged;
    }
}